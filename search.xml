<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Java反射</title>
      <link href="/2018/07/01/Java%E5%8F%8D%E5%B0%84/"/>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>运行状态中，对任意类，可获取其所有方法和属性；对任意对象可调用其任意方法和属性。这种动态操作称之为 Java 反射机制</p><h5 id="Java-反射机制的功能"><a href="#Java-反射机制的功能" class="headerlink" title="Java 反射机制的功能"></a>Java 反射机制的功能</h5><blockquote><ol><li>运行时判断任意对象所属类</li><li>运行时构造任意类的对象</li><li>运行时判断任意类的方法和属性</li><li>运行时调用任意实例的方法</li><li>生成动态代理</li></ol></blockquote><h5 id="Java-反射机制应用场景"><a href="#Java-反射机制应用场景" class="headerlink" title="Java 反射机制应用场景"></a>Java 反射机制应用场景</h5><blockquote><ol><li>逆向代码 （反编译）</li><li>与注解结合的框架 （retrofit）</li><li>单纯的反射机制应用框架 （EventBus）</li><li>动态生成类框架 （Gson）</li></ol></blockquote><h3 id="反射的具体方法"><a href="#反射的具体方法" class="headerlink" title="反射的具体方法"></a>反射的具体方法</h3><h5 id="获取对象的方法"><a href="#获取对象的方法" class="headerlink" title="获取对象的方法"></a>获取对象的方法</h5><ul><li>Class 类的 <em>forName(String clazzName)</em>  静态方法 参数问完整类名</li><li>通过类的 <em>class</em> 属性</li><li><p>调用对象的 <em>getClass()</em> 方法 </p><pre><code>// 第一种Person person1 = Class.forName(&quot;com.mune.example.Person&quot;);// 第二种Person person2 = Person.class;// 第三种Person person3 = new Person();Class&lt;?&gt; persion3 = person3.getClass();</code></pre></li></ul><h5 id="获取成员变量的方法"><a href="#获取成员变量的方法" class="headerlink" title="获取成员变量的方法"></a>获取成员变量的方法</h5>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合</title>
      <link href="/2018/06/28/Java%E9%9B%86%E5%90%88/"/>
      <content type="html"><![CDATA[<h2 id="Java-集合类简介"><a href="#Java-集合类简介" class="headerlink" title="Java 集合类简介"></a>Java 集合类简介</h2><p>Java 集合大致分为：Set 、 List 、 Queue 、 Map s四种体系</p><pre><code>- Set 代表无无序、不可重复的集合- List 代表有序、可重复的集合- Map 代表具有映射关系的集合- Queue Java 5 新增 代表队列集合的实现</code></pre><a id="more"></a><ol><li><p>Java 集合与数组的区别</p></li><li><p>Java 集合类之间的继承关系</p></li><li><p>Collection 接口</p></li></ol><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><ul><li>实现方式：数组<ul><li>优点：<ul><li>节约空间</li><li>访问性能高（通过下标直接访问）</li></ul></li><li>缺点：<ul><li>数组容量限制，超出限制增加50%容量</li><li>按下标remove 或者 添加元素时性能变低</li></ul></li></ul></li><li><p>自动扩容机制</p><pre><code>public boolean add(E e) {ensureCapacityInternal(size + 1);  // Increments modCount! 自动扩容elementData[size++] = e;return true;}private void ensureCapacityInternal(int minCapacity) {    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);    }    ensureExplicitCapacity(minCapacity);}private void ensureExplicitCapacity(int minCapacity) {    modCount++;    // overflow-conscious code    if (minCapacity - elementData.length &gt; 0)        grow(minCapacity);}private void grow(int minCapacity) {    // overflow-conscious code    int oldCapacity = elementData.length;    // 扩展为原来的1.5倍    int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);    // 如果扩为1.5倍还不满足需求，直接扩为需求值    if (newCapacity - minCapacity &lt; 0)        newCapacity = minCapacity;    if (newCapacity - MAX_ARRAY_SIZE &gt; 0)        newCapacity = hugeCapacity(minCapacity);    // minCapacity is usually close to size, so this is a win:    elementData = Arrays.copyOf(elementData, newCapacity);}</code></pre></li></ul><blockquote><p>另外， ArraryList 的 set 和 get 方法都有对 index进行检查 rangeCheck(int index)</p><p>此外，ArrayrList 的 remove 方法 使用的是 System.arraycopy()方法，完成复制后 下标减一  系统 GC</p></blockquote><h3 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h3><ul><li><p><em>实现方式:</em>  双链表</p><ul><li>优点：容量无限制</li><li>缺点：查表时需要指针从头/尾移动 性能较低</li></ul></li><li><p>set 和 get 方法 都是使用 node(int index) 方法 该函数会以O(n/2)的性能去获取一个节点</p><pre><code>Node&lt;E&gt; node(int index) {    // assert isElementIndex(index);    if (index &lt; (size &gt;&gt; 1)) {  // 判断index是在链表的前半部还是后半部，决定从头还是从尾移指针        Node&lt;E&gt; x = first;        for (int i = 0; i &lt; index; i++)            x = x.next;        return x;    } else {        Node&lt;E&gt; x = last;        for (int i = size - 1; i &gt; index; i--)            x = x.prev;        return x;    }}</code></pre></li></ul>]]></content>
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java 基础 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux系统文件目录简介</title>
      <link href="/2018/04/15/Linux%E7%B3%BB%E7%BB%9F%E6%96%87%E4%BB%B6%E7%9B%AE%E5%BD%95%E7%AE%80%E4%BB%8B/"/>
      <content type="html"><![CDATA[<blockquote><p>rootfs : 根文件系统</p></blockquote><a id="more"></a><ul><li>/boot：系统启动相关文件，如内核、initrd、以及grub（bootloader）</li><li>/dev：设备文件<ul><li>块设备：随机访问，数据块</li><li>字符设备：线性访问，按字符为单位</li><li>设备号：主设备号（major）和次设备号（minor）</li></ul></li><li>/etc:配置文件</li><li>/home：用户家目录，每个用户的家目录默认为/home/USERNAME</li><li>/root：管理员的家目录</li><li><p>/lib：库文件</p><ul><li>静态库：.a </li><li>动态库：.dll， .so </li><li>/lib/modules：内核块文件</li></ul></li><li><p>/lib64</p></li><li>/media：挂载点目录，移动设备</li><li>/mnt：挂载点目录，额外的临时文件系统</li><li>/opt：可选目录，第三方程序的安装目录</li><li>/proc：伪文件系统，内核映射文件</li><li>/sys：伪文件系统，跟硬件设备相关的属性映射文件</li><li>/tmp：临时文件，跟硬件设备相关的属性映射文件</li><li>/var：临时文件，/var/tmp：临时文件，跟硬件设备相关的属性映射文件</li><li>/vat：可变文件</li><li>/bin：可执行文件，用户命令</li><li>/sbin：管理命令 </li></ul>]]></content>
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>树和二叉树基础</title>
      <link href="/2018/03/25/%E6%A0%91%E5%92%8C%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80/"/>
      <content type="html"><![CDATA[<h3 id="树的逻辑结构"><a href="#树的逻辑结构" class="headerlink" title="树的逻辑结构"></a>树的逻辑结构</h3><ol><li>树的定义：树是 n （n &gt;= 0）个节结点的有限集合。n = 0 时称之为 空树；  任意非空树满足以下条件：<ul><li>有且仅有一个特定的成为 根（root）的结点</li><li>n &gt; 0 时，除根结点外的其余结点被分成 m (m &gt; 0)互不相交的有限集合，每个集合又是一棵树，成为根结点的子树</li></ul></li></ol><a id="more"></a><ol><li><p>属的基本术语：</p><ul><li>节点的度：结点子树的个数</li><li>树的度：树种各结点度的最大值</li><li>叶子结点（终端结点）：度为零的结点</li><li>分支结点：叶子结点外的结点</li><li>孩子结点、双亲结点、兄弟结点：</li><li>路径、路径长度：由某祖先节点到其某一子孙结点的的线路，该线路唯一，路径中的边数和为路径长度  </li><li>祖先、子孙：<code>自行体会</code></li><li>树的深度：树中节点的最大层数。</li></ul></li><li><p>树的遍历</p><ul><li>前序遍历：<strong><em>根左右</em></strong> </li><li>后序遍历：<strong><em>左右根</em></strong></li><li>层序遍历：上层至下层的从左往右遍历</li></ul></li><li><p>树的存储结构：略</p></li></ol><h3 id="二叉树的逻辑结构"><a href="#二叉树的逻辑结构" class="headerlink" title="二叉树的逻辑结构"></a>二叉树的逻辑结构</h3><blockquote></blockquote><pre><code>template &lt;class DataType&gt;struct BiNode {    DataType data;    BiNode&lt;DataType&gt; * lchild, *rchild;}</code></pre><p><img src="https://s1.ax1x.com/2018/03/25/9qOPkn.jpg" alt=""></p><ol><li><p>前序遍历</p><pre><code>template&lt;class DataType&gt;void BitTree&lt;DataType&gt;::PreOrder(BiNode&lt;DataType&gt; *bt){    if(bt ==  null)        return;                 // 递归调用的结束条件    else     {        cout &lt;&lt; bt-&gt;data;       // 访问根节结点数据        PreOrder(bt-&gt;lchild);   // 遍历bt 左子树        PreOrder(bt-&gt;rchild);   // 遍历bt 右子树    }}</code></pre></li><li><p>中序遍历</p><pre><code>template&lt;class DataType&gt;void BitTree&lt;DataType&gt;::InOrder(BiNode&lt;DataType&gt; *bt){    if(bt == NULL)        return;                 // 递归调用的结束条件    else     {        PreOrder(bt-&gt;lchild);   // 遍历bt 左子树        cout &lt;&lt; bt-&gt;data;       // 访问根节结点数据        PreOrder(bt-&gt;rchild);   // 遍历bt 右子树    }}</code></pre></li></ol><ol><li><p>后序遍历：</p><pre><code>template&lt;class DataType&gt;void BitTree&lt;DataType&gt;::PostOrder(BiNode&lt;DataType&gt; *bt){    if(bt == NULL)        return;                 // 递归调用的结束条件    else     {        PreOrder(bt-&gt;lchild);   // 遍历bt 左子树        PreOrder(bt-&gt;rchild);   // 遍历bt 右子树        cout &lt;&lt; bt-&gt;data;       // 访问根节结点数据    }}</code></pre></li><li><p>层序遍历： </p><pre><code>template&lt;class DataType&gt;void BitTree&lt;DataType&gt;::LevelOrder(){    front = rear = -1;    if (root == NULL)        return;    Q[++rear] = root;    while(front != rear)    {        q = Q[++ front];        cout &lt;&lt; q-&gt;date;        if (q-&gt;lchild != null)            Q[++rear] = q-&gt;lchild;        if (q-&gt;rchild != null)            Q[++rear] = q-&gt;rchild;    }}</code></pre></li></ol><ol><li><p>二叉树前序遍历非递归算法</p><pre><code>template &lt;class DataType&gt;void BiTree&lt;DataType&gt;::PreOrder(BiNode&lt;DataType&gt; * bt){    top = -1;                           // 采用顺序栈    while (bt =! NULL || top != -1)     // 两个条件都不成立才退出循环    {        while (bt != NULL)        {            cout &lt;&lt; bt-&gt;data;            s[++top] = bt;              // 根据指针 bt 入栈            bt = bt-&gt;lchild;        }        if (top != -1)                  // 栈非空        {            bt = s[--top];            bt = bt-&gt;rchild;        }    }}</code></pre></li></ol><ol><li><p>二叉树中序遍历非递归算法</p><pre><code>template &lt;class DataType&gt;void BiTree&lt;DataType&gt;::InOrder(BiNode&lt;DataType&gt; * bt){    top = -1;                           // 采用顺序栈    while (bt =! NULL || top != -1)     // 两个条件都不成立才退出循环    {        while (bt != NULL)        {            s[++top] = bt;              // 根据指针 bt 入栈            bt = bt-&gt;lchild;        }        if (top != -1)                  // 栈非空        {            bt = s[--top];            cout &lt;&lt; bt-&gt;data;            bt = bt-&gt;rchild;        }    }}</code></pre></li></ol><ol><li><p>二叉树后序遍历非递归算法</p><pre><code>template &lt;class DataType&gt;void BiTree&lt;DataType&gt;::InOrder(BiNode&lt;DataType&gt; * bt){    top = -1;                           // 采用顺序栈    while (bt =! NULL || top != -1)     // 两个条件都不成立才退出循环    {        while (bt != NULL)        {            s[++top] = bt;              // 根据指针 bt 入栈            bt = bt-&gt;lchild;        }        if (top != -1)                  // 栈非空        {            bt = s[--top];            bt = bt-&gt;rchild;        }    }}</code></pre></li></ol><ol><li><p>后序遍历非递归算法</p><pre><code>template &lt;class DataType&gt;struct element {    BiNode&lt;DataType&gt; * pre;    int flag;}template &lt;class DataType&gt;void BiTree&lt;DataType&gt;::PostOrder(BiNode&lt;DataType&gt; * bt){    top = -1;    while (bt != NULL || top != -1)    {        while ( top != NULL)        {            top++;            // root 连同标志 flag 入栈            s[top].pre = bt;            s[top].flag = 1;            bt = bt-&gt;lchild;        }        while (top != -1 &amp;&amp; s[top].flag == 2)        {            bt = s[top--].pre;            cout &lt;&lt; bt-&gt;data;        }        if (top != -1)        {            s[top].flag = 2;            bt = s[top].pre-&gt;rchild;        }    }}</code></pre></li></ol>]]></content>
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="/2018/03/21/%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <content type="html"><![CDATA[<ul><li>浅拷贝：拷贝引用</li><li>深拷贝：拷贝内容</li></ul><a id="more"></a><ol><li><p>浅拷贝： </p><pre><code>a = [1, 2, 3]b = a </code></pre><p> <img src="https://s1.ax1x.com/2018/03/21/97y41S.png" alt="浅拷贝"></p></li><li><p>深拷贝： </p><pre><code>c = copy.deepcopy(a)    </code></pre><p> <img src="https://s1.ax1x.com/2018/03/21/97RfsO.png" alt="深拷贝"></p></li><li><p>copy 模块的 copy() 方法和 deepcopy()方法</p><blockquote><p>copy 和 deepcopy 得区别在于复合对象的拷贝时</p></blockquote><p> copy 只对被拷贝对象进行拷贝，不对当前对象的引用对象进行拷贝</p><p> deepcopy 对背靠背对象进行拷贝时 同时也对被拷贝的对象的引用对象进行递归拷贝，所以deepcopy使用会导致一些问题</p><p> <img src="https://s1.ax1x.com/2018/03/21/97fJg0.png" alt="dcopy与deepcopy"></p><p> <img src="https://s1.ax1x.com/2018/03/21/97fwE4.png" alt="dcopy与deepcopy"></p></li><li><p>当拷贝一个不可变类型时，拷贝得到的对象依然是被拷贝对象的引用</p></li></ol>]]></content>
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python 中 is 与 == 的区别</title>
      <link href="/2018/03/21/Python-%E4%B8%AD-is-%E4%B8%8E-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <content type="html"><![CDATA[<blockquote><p>引述官方文档</p></blockquote><a id="more"></a><pre><code>Value comparisons:     The operators &quot;&lt;&quot;, &quot;&gt;&quot;, &quot;==&quot;, &quot;&gt;=&quot;, &quot;&lt;=&quot;, and &quot;!=&quot; compare the valuesof two objects.  The objects do not need to have the same type.Identity comparisons:    The operators &quot;is&quot; and &quot;is not&quot; test for object identity: &quot;x is y&quot; istrue if and only if *x* and *y* are the same object.  Object identityis determined using the &quot;id()&quot; function.  &quot;x is not y&quot; yields theinverse truth value.</code></pre><ul><li>由官方文档解释可知：<ul><li>is 判断的是两个对象的ID</li><li>== 判断的是两个对象的值</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的第一篇文章</title>
      <link href="/2018/03/10/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <content type="html"><![CDATA[<center>### human is an interesting animal</center>]]></content>
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 其他 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/10/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
